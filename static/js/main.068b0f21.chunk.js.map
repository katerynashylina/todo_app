{"version":3,"sources":["utils/Filter.ts","components/Footer.tsx","utils/fetchClient.ts","utils/Errors.ts","api/todos.ts","components/Header.tsx","utils/TodoContext.tsx","components/TodoItem.tsx","components/TodoList.tsx","components/Notification.tsx","components/Loader/Loader.tsx","App.tsx","index.tsx"],"names":["Filter","Footer","selectedFilter","visibleTodos","setSelectedFilter","onClearCompleted","activeTodos","todos","filter","todo","completed","isAnyCompleted","some","className","length","href","classNames","selected","All","onClick","Active","Completed","type","style","visibility","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","Errors","client","getTodos","userId","createTodo","newTodo","deleteTodo","todoId","patchTodo","Header","setTodos","setError","isLoading","handleCompleteAll","useState","setNewTodo","handleSubmit","event","a","preventDefault","trim","EmptyTitle","newTodoItem","id","title","createdTodo","prevTodos","Adding","allChecked","onSubmit","placeholder","value","onChange","target","disabled","TodoContext","React","createContext","onDelete","updateTodo","removeLoadingTodo","addLoadingTodo","loadingTodos","deletingTodoId","updateTodoOnServer","TodoItem","useContext","newTitle","setNewTitle","isEditing","setIsEditing","handleTitleChange","handleTodoCheck","updatedTodo","inputRef","useRef","useEffect","current","focus","isActive","includes","onDoubleClick","checked","onBlur","onKeyUp","key","ref","TodoList","map","Notification","message","isShowNotification","setIsShowNotification","timer","clearTimeout","Loader","data-cy","USER_ID","App","NoError","error","setIsLoading","allCompleted","setAllCompleted","setLoadingTodos","setDeletingTodoId","Updating","fetchTodos","prev","Deleting","completedTodoIds","all","updates","visibleTodoItems","Provider","updatedTodos","prevLoadingTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.068b0f21.chunk.js","sourcesContent":["/* eslint-disable no-shadow */\n\nexport enum Filter {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","/* eslint-disable react/react-in-jsx-scope */\nimport classNames from 'classnames';\nimport { Filter } from '../utils/Filter';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  visibleTodos: Todo[],\n  selectedFilter: string,\n  setSelectedFilter: (option: Filter) => void,\n  onClearCompleted:\n  (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void,\n  todos: Todo[],\n};\n\nexport const Footer: React.FC<Props> = ({\n  selectedFilter,\n  visibleTodos,\n  setSelectedFilter,\n  onClearCompleted,\n  todos,\n}) => {\n  const activeTodos = todos.filter((todo) => !todo.completed);\n  const isAnyCompleted = visibleTodos.some(todo => todo.completed);\n\n  return (\n    <>\n      <footer className=\"todoapp__footer\">\n        <span className=\"todo-count\">\n          {`${activeTodos.length} items left`}\n        </span>\n\n        <nav className=\"filter\">\n          <a\n            href=\"#/\"\n            className={classNames('filter__link',\n              { selected: selectedFilter === Filter.All })}\n            onClick={() => setSelectedFilter(Filter.All)}\n          >\n            All\n          </a>\n\n          <a\n            href=\"#/active\"\n            className={classNames('filter__link',\n              { selected: selectedFilter === Filter.Active })}\n            onClick={() => setSelectedFilter(Filter.Active)}\n          >\n            Active\n          </a>\n\n          <a\n            href=\"#/completed\"\n            className={classNames('filter__link',\n              { selected: selectedFilter === Filter.Completed })}\n            onClick={() => setSelectedFilter(Filter.Completed)}\n          >\n            Completed\n          </a>\n        </nav>\n\n        <button\n          type=\"button\"\n          className=\"todoapp__clear-completed\"\n          onClick={onClearCompleted}\n          style={{\n            visibility: isAnyCompleted ? 'visible' : 'hidden',\n          }}\n        >\n          Clear completed\n        </button>\n      </footer>\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: Partial<Todo>) => request<T>(\n    url, 'PATCH', data,\n  ),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","/* eslint-disable no-shadow */\n\nexport enum Errors {\n  NoError = '',\n  EmptyTitle = 'Title can\\'t be empty',\n  Adding = 'Unable to add a todo',\n  Deleting = 'Unable to delete a todo',\n  Updating = 'Unable to update a todo',\n}\n","import { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const createTodo = (userId: number, newTodo: Todo) => {\n  return client.post<Todo>(`/todos?userId=${userId}`, newTodo);\n};\n\nexport const deleteTodo = (userId: number, todoId: number) => {\n  return client.delete(`/todos/${todoId}?userId=${userId}`);\n};\n\nexport const patchTodo = (todoId: number, data: Partial<Todo>) => {\n  return client.patch(`/todos/${todoId}`, data);\n};\n","/* eslint-disable react/react-in-jsx-scope */\nimport { useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../types/Todo';\nimport { createTodo } from '../api/todos';\nimport { Errors } from '../utils/Errors';\n\ntype Props = {\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>,\n  todos: Todo[],\n  setError: React.Dispatch<React.SetStateAction<Errors>>,\n  isLoading: boolean,\n  handleCompleteAll: () => Promise<void>,\n};\n\nexport const Header: React.FC<Props> = ({\n  setTodos,\n  todos,\n  setError,\n  isLoading,\n  handleCompleteAll,\n}) => {\n  const [newTodo, setNewTodo] = useState('');\n  const userId = 9934;\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewTodo(event.target.value);\n  };\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const trimmedTitle = newTodo.trim();\n\n    if (!trimmedTitle) {\n      setError(Errors.EmptyTitle);\n\n      return;\n    }\n\n    const newTodoItem: Todo = {\n      id: 0,\n      userId,\n      title: newTodo.trim(),\n      completed: false,\n    };\n\n    try {\n      const createdTodo = await createTodo(9934, newTodoItem);\n\n      setTodos((prevTodos) => [...prevTodos, createdTodo]);\n    } catch {\n      setError(Errors.Adding);\n    }\n\n    setNewTodo('');\n  };\n\n  const allChecked = todos\n    .filter(todo => todo.completed).length === todos.length;\n\n  return (\n    <header className=\"todoapp__header\">\n      {!!todos.length && (\n        /* eslint-disable jsx-a11y/control-has-associated-label */\n        <button\n          type=\"button\"\n          className={classNames(\n            'todoapp__toggle-all',\n            (allChecked && 'active'),\n          )}\n          onClick={handleCompleteAll}\n        />\n      )}\n\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"todoapp__new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={newTodo}\n          onChange={handleInputChange}\n          disabled={isLoading}\n        />\n      </form>\n    </header>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../types/Todo';\n\ntype ITodoContext = {\n  onDelete: (todoId: number) => void,\n  updateTodo: (updatedTodo: Todo) => void,\n  removeLoadingTodo: (todoId: number) => void,\n  addLoadingTodo: (todoId: number) => void,\n  loadingTodos: number[],\n  deletingTodoId: number | null,\n  isLoading: boolean,\n  updateTodoOnServer: (todoId: number, data: Partial<Todo>) => Promise<void>,\n};\n\nexport const TodoContext = React.createContext<ITodoContext>({\n  onDelete: () => {},\n  updateTodo: () => {},\n  removeLoadingTodo: () => {},\n  addLoadingTodo: () => {},\n  loadingTodos: [],\n  deletingTodoId: null,\n  isLoading: false,\n  updateTodoOnServer: async () => {},\n});\n","/* eslint-disable react/react-in-jsx-scope */\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport classNames from 'classnames';\nimport React, {\n  useContext, useState, useEffect, useRef,\n} from 'react';\nimport { Todo } from '../types/Todo';\nimport { patchTodo } from '../api/todos';\nimport { TodoContext } from '../utils/TodoContext';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => {\n  const {\n    onDelete,\n    updateTodo,\n    removeLoadingTodo,\n    addLoadingTodo,\n    loadingTodos,\n    deletingTodoId,\n    isLoading,\n    updateTodoOnServer,\n  } = useContext(TodoContext);\n\n  const { id, title, completed } = todo;\n\n  const [newTitle, setNewTitle] = useState(title);\n  const [isEditing, setIsEditing] = useState(false);\n\n  const handleTitleChange = () => {\n    if (!newTitle.trim()) {\n      onDelete(id);\n      setIsEditing(false);\n\n      return;\n    }\n\n    if (newTitle.trim() === title) {\n      setIsEditing(false);\n\n      return;\n    }\n\n    updateTodoOnServer(id, { title: newTitle });\n    setIsEditing(false);\n  };\n\n  const handleKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Escape') {\n      setIsEditing(false);\n      setNewTitle(todo.title);\n    }\n  };\n\n  const handleTodoCheck = async () => {\n    try {\n      addLoadingTodo(todo.id);\n      const updatedTodo = { ...todo, completed: !todo.completed };\n\n      await patchTodo(todo.id, updatedTodo);\n      updateTodo(updatedTodo);\n    } finally {\n      removeLoadingTodo(todo.id);\n    }\n  };\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  const isActive = loadingTodos.includes(todo.id)\n    || deletingTodoId === todo.id\n    || isLoading;\n\n  return (\n    <section className=\"todoapp__main\">\n      <div\n        onDoubleClick={() => setIsEditing(true)}\n        className={classNames('todo', { completed: todo.completed })}\n      >\n        <label className=\"todo__status-label\">\n          <input\n            type=\"checkbox\"\n            className=\"todo__status\"\n            onChange={handleTodoCheck}\n            checked={completed}\n          />\n        </label>\n\n        {isEditing ? (\n          <form onSubmit={handleTitleChange}>\n            <input\n              type=\"text\"\n              className=\"todo__title-field\"\n              value={newTitle}\n              onChange={(event) => setNewTitle(event.target.value)}\n              onBlur={() => handleTitleChange()}\n              onKeyUp={handleKeyUp}\n              // eslint-disable-next-line jsx-a11y/no-autofocus\n              ref={inputRef}\n            />\n          </form>\n        ) : (\n          <>\n            <span className=\"todo__title\">{ title }</span>\n\n            <button\n              type=\"button\"\n              className=\"todo__remove\"\n              onClick={() => onDelete(id)}\n            >\n              ×\n            </button>\n          </>\n        )}\n\n        <div className={classNames(\n          'modal overlay',\n          { 'is-active': isActive },\n        )}\n        >\n          <div className=\"modal-background has-background-white-ter\" />\n          <div className=\"loader\" />\n        </div>\n      </div>\n    </section>\n  );\n};\n","import React from 'react';\nimport { TodoItem } from './TodoItem';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <div>\n      {todos.map((todo: Todo) => (<TodoItem todo={todo} key={todo.id} />))}\n    </div>\n  );\n};\n","/* eslint-disable react/react-in-jsx-scope */\nimport { useState, useEffect } from 'react';\n\ntype Props = {\n  message: string;\n};\n\nexport const Notification: React.FC<Props> = ({ message }) => {\n  const [isShowNotification, setIsShowNotification] = useState(false);\n\n  useEffect(() => {\n    setIsShowNotification(true);\n\n    const timer = setTimeout(() => {\n      setIsShowNotification(false);\n    }, 3000);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [message]);\n\n  const handleClose = () => {\n    setIsShowNotification(false);\n  };\n\n  return (\n    <>\n      {isShowNotification && (\n        <div className=\"notification is-danger is-light has-text-weight-normal\">\n          {/* eslint-disable jsx-a11y/control-has-associated-label */}\n          <button\n            type=\"button\"\n            className=\"delete\"\n            onClick={handleClose}\n          />\n\n          {message}\n        </div>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport { UserWarning } from './UserWarning';\nimport { Footer } from './components/Footer';\nimport { Header } from './components/Header';\nimport { TodoList } from './components/TodoList';\nimport { Notification } from './components/Notification';\nimport { Filter } from './utils/Filter';\nimport { Todo } from './types/Todo';\nimport { getTodos, deleteTodo, patchTodo } from './api/todos';\nimport { Errors } from './utils/Errors';\nimport { Loader } from './components/Loader';\nimport { TodoContext } from './utils/TodoContext';\n\nconst USER_ID = 9934;\n\nconst visibleTodos = (todos: Todo[], selectedFilter: Filter) => {\n  switch (selectedFilter) {\n    case Filter.Active:\n      return todos.filter((todo) => !todo.completed);\n    case Filter.Completed:\n      return todos.filter((todo) => todo.completed);\n    default:\n      return todos;\n  }\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedFilter, setSelectedFilter] = useState<Filter>(Filter.All);\n  const [error, setError] = useState(Errors.NoError);\n  const [isLoading, setIsLoading] = useState(false);\n  const [allCompleted, setAllCompleted] = useState(false);\n  const [loadingTodos, setLoadingTodos] = useState<number[]>([]);\n  const [deletingTodoId, setDeletingTodoId] = useState<number | null>(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    async function fetchTodos() {\n      try {\n        setTodos(await getTodos(USER_ID));\n      } catch {\n        setError(Errors.Updating);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    fetchTodos();\n  }, []);\n\n  const updateTodoOnServer = async (todoId: number, data: Partial<Todo>) => {\n    setLoadingTodos(prev => [...prev, todoId]);\n\n    try {\n      await patchTodo(todoId, data);\n\n      setTodos((prevTodos) => prevTodos.map(todo => {\n        if (todo.id === todoId) {\n          return { ...todo, ...data };\n        }\n\n        return todo;\n      }));\n    } catch {\n      setError(Errors.Updating);\n\n      setError(Errors.NoError);\n    } finally {\n      setLoadingTodos([]);\n    }\n  };\n\n  const onDelete = async (todoId: number) => {\n    setDeletingTodoId(todoId);\n\n    try {\n      await deleteTodo(USER_ID, todoId);\n      setTodos(todos.filter(todo => todo.id !== todoId));\n    } catch {\n      setError(Errors.Deleting);\n    } finally {\n      setDeletingTodoId(null);\n    }\n  };\n\n  const onClearCompleted = async () => {\n    setIsLoading(true);\n    const completedTodoIds = todos\n      .filter(todo => todo.completed)\n      .map(todo => todo.id);\n\n    try {\n      await Promise.all(completedTodoIds.map(id => deleteTodo(USER_ID, id)));\n      setTodos(todos.filter(todo => !todo.completed));\n    } catch {\n      setError(Errors.Deleting);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const updateTodo = (updatedTodo: Todo) => {\n    const updatedTodos = todos.map((todo) => (\n      todo.id === updatedTodo.id ? { ...todo, ...updatedTodo } : todo\n    ));\n\n    setTodos(updatedTodos);\n  };\n\n  const handleCompleteAll = async () => {\n    try {\n      setLoadingTodos(todos.map(todo => todo.id));\n      const updates = { completed: !allCompleted };\n\n      await Promise.all(\n        todos\n          .filter((todo) => !todo.completed)\n          .map((todo) => patchTodo(todo.id, updates)),\n      );\n\n      setTodos((data) => data.map((todo) => ({ ...todo, ...updates })));\n      setAllCompleted(!allCompleted);\n      setLoadingTodos([]);\n    } catch {\n      setError(Errors.Updating);\n      setLoadingTodos([]);\n    }\n  };\n\n  const addLoadingTodo = (todoId: number) => {\n    setLoadingTodos(prevLoadingTodos => [...prevLoadingTodos, todoId]);\n  };\n\n  const removeLoadingTodo = (todoId: number) => {\n    setLoadingTodos(\n      prevLoadingTodos => prevLoadingTodos.filter(id => id !== todoId),\n    );\n  };\n\n  if (!USER_ID) {\n    return <UserWarning />;\n  }\n\n  const visibleTodoItems = visibleTodos(todos, selectedFilter);\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n\n      <div className=\"todoapp__content\">\n        <Header\n          setTodos={setTodos}\n          todos={todos}\n          setError={setError}\n          isLoading={isLoading}\n          handleCompleteAll={handleCompleteAll}\n        />\n\n        {isLoading ? <Loader />\n          : (\n            <TodoContext.Provider\n              value={{\n                onDelete,\n                updateTodo,\n                removeLoadingTodo,\n                addLoadingTodo,\n                loadingTodos,\n                deletingTodoId,\n                isLoading,\n                updateTodoOnServer,\n              }}\n            >\n              <TodoList todos={visibleTodoItems} />\n            </TodoContext.Provider>\n          )}\n\n        {(!!todos.length) && (\n          <Footer\n            visibleTodos={visibleTodoItems}\n            selectedFilter={selectedFilter}\n            setSelectedFilter={setSelectedFilter}\n            onClearCompleted={onClearCompleted}\n            todos={todos}\n          />\n        )}\n      </div>\n\n      {error && <Notification message={error} />}\n    </div>\n  );\n};\n","/* eslint-disable react/react-in-jsx-scope */\nimport ReactDOM from 'react-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}